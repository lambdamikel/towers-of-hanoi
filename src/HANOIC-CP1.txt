#
# Towers of Hanoi for the Kosmos CP1 Computer System
# Recursive Version 
# (C) 2024 by LambdaMikel
#
# NOTE: Requires the CP3 Memory Expansion for 256 words of memory!
# 
# This version works for up to 13 disks! 
# It can work with even more disks, but the requires program changes, 
# i.e., move the value stack start address to 170,
# and the return stack start to 230. 

# 
# Note: you can change the nr. of disks at address 008 (04.004 = 3 disks!)
# You can also change the peg names (010, 012, 014).
# 
# Take note of the addresses - the addresses are not always consecutive,
# there are "gaps" in the program. Change the address during program entry
# accordingly. Then Sstart the program with 000 PC RUN. 
# 

#
# Initialization code: 
# Prepare stack pointers 
#

000 ako 04.200 # value stack start 
001 abs 06.146 # source * 

002 ako 04.201 
003 abs 06.147 # spare * 

004 ako 04.202 
005 abs 06.148 # dest * 

006 ako 04.240 # return stack start 
007 abs 06.149 # return stack * 

#
# prepare stacks (load values into value frame, push return address) 
# for main call
# 

008 ako 04.003 # disk nr 
009 abs 06.145 # number of disks - no stack 

010 ako 04.001 # source peg number = 1 
011 ais 20.146 # source peg number -> stack frame 

012 ako 04.002 # spare peg number = 2
013 ais 20.147 # spare peg number -> stack frame 

014 ako 04.003 # dest peg number = 3 
015 ais 20.148 # dest peg number -> stack frame 

016 ako 04.019 # continuation address after recursive call 
017 ais 20.149 # push return address onto return stack

#
# toplevel call 
# 
 
018 spu 09.020 

#
# returned from toplevel call  
# 

# end:

019 hlt 01.00  

# -------------------------------------------------------

#
# main recursive function: 
# function movetower(disk, source, dest, spare):
# 

#
# move_tower: 
#


020 lda 05.145  
021 vgl 10.150 # one?
022 spb 11.057 # branch if 

#
# disk > 0: inductive case 
#

# rec_case:

# prepare the first recursive call:
# movetower(disk - 1, source, spare, dest)
# prepare n-1 disk number

# source <- source
# dest <- spare
# spare <- dest

# save old stack frame values into aux registers

023 ako 04.026 # label_0 
024 abs 06.143 # simple return 1 
025 spu 09.098 # save_and_push 

# label_0:

# source <- source, store into stack frame

026 lda 05.140 # aux 1
027 ais 20.146 # -> *source 

# dest <-spare, store into stack frame

028 lda 05.142 # aux 3
029 ais 20.148 # -> *dest

# spare <- dest, store into stack frame

030 lda 05.141 # aux 2
031 ais 20.147 # -> *spare 

# stack frame ready and filled,
# now push return address onto return stack

032 ako 04.035 # push return address... 
033 ais 20.149 # ...onto return stack 

# both value and return stack prepared, 
# do the recursive call! 

034 spu 09.020 

# label_1:

# returned from recursive call, pop value stacks

035 ako 04.038 # label_2 
036 abs 06.143 # simple return 1 
037 spu 09.120 # pop_and_restore 

# label_2:

038 ako 04.041 # label 3 
039 abs 06.143 # simple return 1 
040 spu 09.061 # move_one_disk 

# label_3:

# prepare the second recursive call: 
# movetower(disk - 1, spare, dest, source)
# a copy of the first call, but peg name shuffling differs

# source <- spare
# dest <- dest
# spare <- source 

041 ako 04.044 # label_4 
042 abs 06.143 # simple return 1 
043 spu 09.098 # save_and_push

# label_4:

# source <- dest, store into stack frame   

044 lda 05.142
045 ais 20.146

# dest <- dest, store into stack frame 

046 lda 05.141
047 ais 20.148

# spare <- source, store into stack frame 

048 lda 05.140
049 ais 20.147

# do the second recursive call! 

050 ako 04.053 # label_5 
051 ais 20.149 # ...onto return stack 

052 spu 09.020

# label_5:

# pop value stacks

053 ako 04.056 # label_6 
054 abs 06.143 # simple return 1 
055 spu 09.120 # pop and restore 

# label_6: 

# return to previous incarnation level 

056 spu 09.136 # return block 

#
# bottom-case: move disk from source to dest
# 
  
# make move_one_disk call

057 ako 04.060 # label_7 
058 abs 06.143 # simple return 1
059 spu 09.061 # move one disk output

# label_7:

# return 

060 spu 09.136 # return block 

# -------------------------------------------------------

#
# subroutine: move one disk from source to dest 
#

#
# move_one_disk:
#

# show separator 1 

061 ako 04.065 # show_disk 
062 abs 06.144 # simple return 2! 
063 lda 05.152 # show separator 1 
064 spu 09.078 # disp 

# show disk number 

# show_disk:

065 ako 04.069 # show_source 
066 abs 06.144 # simple return 2
067 lda 05.145 # disk nr. 
068 spu 09.078 # disp 

# show source peg 

# show_source:

069 ako 04.073 # show_dest
070 abs 06.144 # simple return 2
071 lia 19.146 # source* 
072 spu 09.078 # disp 

# show dest peg 

# show_dest:

073 ako 04.077 # return_disp 
074 abs 06.144 # simple return 2
075 lia 19.148 # target*
076 spu 09.078 # disp 

# return 

# return_disp:

077 siu 21.143 # simple return 1

# -------------------------------------------------------

#
# subroutine: display accu with separator and delay 
# 

# disp:

078 anz 02.000 # display accu value 
 
079 vzg 03.255 # delay of 2 seconds 
080 vzg 03.255
081 vzg 03.255
082 vzg 03.255
083 vzg 03.255
084 vzg 03.255
085 vzg 03.255
086 vzg 03.255

# show separator 2

087 lda 05.153 
088 anz 02.000
 
089 vzg 03.255
090 vzg 03.255
091 vzg 03.255
092 vzg 03.255
093 vzg 03.255
094 vzg 03.255
095 vzg 03.255
096 vzg 03.255

097 siu 21.144 # simple return 2 

# -------------------------------------------------------

#
# sub-routine to decr. disk nr., save current values to aux 
# and create new stack frame for values and return stack
#

#
# save_and_push: 
#

098 lda 05.145 # load disk 
099 sub 08.150 # sub 1
100 abs 06.145 # save 

101 lia 19.146 # save source
102 abs 06.140     

103 lia 19.148 # save dest
104 abs 06.141     

105 lia 19.147 # save spare 
106 abs 06.142

# create new stack frame for source, spare, dest 

107 lda 05.146 
108 add 07.151
109 abs 06.146

110 lda 05.148 
111 add 07.151
112 abs 06.148

113 lda 05.147
114 add 07.151
115 abs 06.147

# prepare new return stack frame

116 lda 05.149 
117 add 07.150
118 abs 06.149

119 siu 21.143 # simple return 1 

# -------------------------------------------------------

#
# sub-routine to incr. disk nr., 
# and pop stack frame for values and return stack 
#

#
# pop_and_restore: 
#

120 lda 05.145 # load disk 
121 add 07.150 # add 1
122 abs 06.145 # save 

123 lda 05.146 
124 sub 08.151
125 abs 06.146

126 lda 05.148 
127 sub 08.151
128 abs 06.148

129 lda 05.147
130 sub 08.151
131 abs 06.147

132 lda 05.149 
133 sub 08.150
134 abs 06.149

135 siu 21.143 # simple return 1

# -------------------------------------------------------

#
# return block: 
#

136 lia 19.149 
137 abs 06.143 
138 siu 21.143

# -------------------------------------------------------

#
# required code constants 
#

150 00.001 # const 1
151 00.003 # const 3
152 11.111 # sep 1
153 22.222 # sep 2

# -------------------------------------------------------

#
# data region / variables - memory map: 
#

# 140 aux 1 
# 141 aux 2 
# 142 aux 3
# 143 simple return 1
# 144 simple return 2 

# 145 disk nr. 
# 146 source stack pointer
# 147 spare  stack pointer
# 148 dest   stack pointer
# 149 return stack pointer

# value stack starts at 200 -> 239

# return stack starts at 240 -> 255
